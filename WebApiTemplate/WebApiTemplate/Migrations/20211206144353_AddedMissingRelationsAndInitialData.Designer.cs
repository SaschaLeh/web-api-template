// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repository;

#nullable disable

namespace WebApiTemplate.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20211206144353_AddedMissingRelationsAndInitialData")]
    partial class AddedMissingRelationsAndInitialData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CourseStudent", b =>
                {
                    b.Property<Guid>("CoursesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StudentsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CoursesId", "StudentsId");

                    b.HasIndex("StudentsId");

                    b.ToTable("CourseStudent");
                });

            modelBuilder.Entity("Entities.Model.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CourseId");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a9e69332-e9b6-4ff5-aeaa-c65a40189fc1"),
                            Description = "Lorem ipsum dolor sit amet, consetetur sadipscing elitr.",
                            TeacherId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Title = "Math Part 1"
                        },
                        new
                        {
                            Id = new Guid("01725814-8660-4493-b42b-b90082b45c88"),
                            Description = "Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam.",
                            TeacherId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Title = "Programming 1"
                        });
                });

            modelBuilder.Entity("Entities.Model.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StudentId");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = new Guid("de6764bf-3490-4ce0-ac06-dd6d9345b52b"),
                            Age = 16,
                            Name = "John Doe"
                        },
                        new
                        {
                            Id = new Guid("b1fd6091-bad7-4cf0-bbdd-65a77dfcb8b7"),
                            Age = 17,
                            Name = "Jane Doe"
                        });
                });

            modelBuilder.Entity("Entities.Model.Teacher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TeacherId");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("46a47703-8405-459a-95a3-dae276e0eb46"),
                            CourseId = new Guid("a9e69332-e9b6-4ff5-aeaa-c65a40189fc1"),
                            Name = "Hans Georg"
                        },
                        new
                        {
                            Id = new Guid("fdffc1b3-da38-4cc6-b946-f9f2a98e6e6a"),
                            CourseId = new Guid("01725814-8660-4493-b42b-b90082b45c88"),
                            Name = "Hans Georg"
                        });
                });

            modelBuilder.Entity("CourseStudent", b =>
                {
                    b.HasOne("Entities.Model.Course", null)
                        .WithMany()
                        .HasForeignKey("CoursesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Model.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Model.Course", b =>
                {
                    b.HasOne("Entities.Model.Teacher", "Teacher")
                        .WithMany("Courses")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Entities.Model.Teacher", b =>
                {
                    b.Navigation("Courses");
                });
#pragma warning restore 612, 618
        }
    }
}
